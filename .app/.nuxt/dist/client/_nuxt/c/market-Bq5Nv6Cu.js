import{d as t}from"../e/entry-8qgg5CL-.js";import{u as s}from"./useExchange-VMAYQu3P.js";const e=t("market",{state:()=>({markets:[],selected:[],selectedMarket:null,bestAsk:0,bestBid:0,bestAskClass:"",loading:!0,orders:[],binaryPositions:[],binaryExpirationTimes:[],watchlists:[],order:{amount:0,price:0,stopLossPrice:null,takeProfitPrice:null,type:"LIMIT",side:"BUY",percentage:0,closed_at:null}}),getters:{items:t=>t.markets,getBinaryLivePositions:t=>t.binaryPositions.filter((t=>!1===t.is_demo&&"PENDING"!==t.status)),getBinaryPracticePositions:t=>t.binaryPositions.filter((t=>!0===t.is_demo&&"PENDING"!==t.status))},actions:{async fetchWatchlists(){this.loading=!0;const{getWatchlists:t}=s();try{const s=await t();this.watchlists=s.data.result}catch(e){console.log(e)}this.loading=!1},setOrderData(t,s){this.order.price=Number(t.replace(/,/g,"")),this.order.side=s},updateItem(t,s,e=!1){t.baseVolume=s.baseVolume,t.quoteVolume=s.quoteVolume,t.priceStatus=s.priceStatus,t.changeStatus=s.changeStatus,t.price=s.price,t.change=s.change},updateHistory(t,s){const e=this.markets.find((s=>s.symbol===t));e&&(e.history||(e.history=[]),e.history=s)},appendMarketData(t,s){if(Array.isArray(t))t.forEach((t=>{const s=this.markets.find((s=>s.symbol===t.symbol));s&&this.updateItem(s,t,!0===s.is_eco);const e=this.watchlists.find((s=>s.symbol===t.symbol));e&&this.updateItem(e,t,!0===s.is_eco)}));else if("object"==typeof t)for(const[e,a]of Object.entries(t)){const t=this.markets.find((t=>t.symbol===e));t&&this.updateItem(t,a,!0===t.is_eco);const s=this.watchlists.find((t=>t.symbol===e));s&&this.updateItem(s,a,!0===t.is_eco)}if(s)for(const[e,a]of Object.entries(s))this.updateHistory(e,a)},async fetchMarkets(){this.loading=!0;const{getMarkets:t}=s(),e=await t();this.markets=e.data.result,this.loading=!1},async fetchOrders(){this.loading=!0;const{getOrders:t}=s();try{const s=await t();this.orders=s.data.result}catch(e){console.log(e)}this.loading=!1},async fetchBinaryPositions(t="ALL"){this.loading=!0;const{getBinaryOrders:e}=s();try{const s=await e(t);this.binaryPositions=s.data.result}catch(a){console.log(a)}this.loading=!1},async cancelBinaryPosition(t,e){const{cancelBinaryOrder:a}=s();try{const s=await a(t,e);return"success"===s.status&&(this.binaryPositions=this.binaryPositions.filter((s=>s.uuid!==t))),s}catch(i){return i}},async updateMarket(t,e,a,i){try{const{updateMarket:r}=s(),o=await r(t,e,a,i),n=this.markets.findIndex((s=>s.id===t));return-1!==n&&(this.markets[n]=o.data.result),this.selectedMarket?.id===t&&(this.selectedMarket=o.data.result),o}catch(r){return r}},async updateMarketsStatus(t,e){try{const{updateMarketsStatus:a}=s(),i=await a(t,e);return this.markets=this.markets.map((s=>t.includes(s.id)?{...s,status:e}:s)),i}catch(a){return a}},selectMarket(t){this.selectedMarket=t},selectMarketBySymbol(t){const s=this.markets.find((s=>s.symbol===t));s&&(this.selectedMarket=s)}}});export{e as u};
